---
title: "Assignment 2"
---


```{r}
library(tidyverse) 
library(rvest) 
library(stringr) 

# Define the URL
url_2010_2023 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_before_2009 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"

all_urls <- c(url_2010_2023, url_before_2009)
movie_data <- data.frame()
for (url in all_urls) {
  data_html <- read_html(url)

  title_names <- data_html |> html_nodes('.ipc-title__text')
  title_names <- html_text(title_names)
  title_names <- tail(head(title_names,-1),-1)
  title_names <- str_split(title_names, " ", n=2)
  title_names <- unlist(lapply(title_names, function(x) {x[2]}))

  year_values <- data_html |> html_nodes('.dli-title-metadata-item:nth-child(1)')
  year_values <- html_text(year_values)
  year_values <- str_remove_all(year_values, "[()]")
  year_values <- as.numeric(year_values)
  
  duration_values <- data_html |> html_nodes('.dli-title-metadata-item:nth-child(2)')
  duration_values <- html_text(duration_values)
  duration_values <- 60*as.numeric(substr(duration_values,1,1))+ifelse(nchar(duration_values)>2,as.integer(substring(duration_values,nchar(duration_values)-2,nchar(duration_values)-1)),0)
  
  rating_values <- data_html %>% html_nodes('.ratingGroup--imdb-rating') %>% html_text() %>%
  str_match("\\b([0-9]+\\.[0-9]+)") %>% as.numeric() # I write str_match("\\b([0-9]+\\.[0-9]+)") line of code with the help of AI 
  
  vote_values <- data_html |>  html_nodes(".kRnqtn")
  vote_values <- html_text(vote_values)
  vote_values <- str_remove_all(vote_values, "[a-zA-Z,]") 
  vote_values <- as.numeric(vote_values)
  
  temp_data <- data.frame(Title = title_names,
                          Year = year_values,
                          Duration = duration_values,
                          Rating = rating_values,
                          Votes = vote_values)
  
  temp_data <- unique(temp_data)
  movie_data <- rbind(movie_data, temp_data)
}

# a) 

# It ranks the movies from the highest rated movie to the lowest rated movie and shows the 5 highest rated movies.
movie_data %>% arrange(desc(Rating)) %>% head(5) 
# It sorts the movie from the highest rated movie to the lowest rated movie and shows the 5 lowest rated movies.
movie_data %>% arrange(desc(Rating)) %>% tail(5) 
# In my opinion, the highest-rated movies include dramatic and emotional movies, while the lowest-rated movies include comedies movies. This shows that Turkish audiences value dramatic films more than comedy films. Additionally, Recep İvedik (2008), the first movie of the Recep İvedik series, has a much higher score with 4.8 points. This suggests that the quality of sequels has decreased or that audiences have become bored with such films.

#b)

# My favorite movies are Kuru Otlar Üstüne and Kelebekler.
movie_data %>% filter(Title == "Kuru Otlar Üstüne")
movie_data %>% filter(Title == "Kelebekler")

#c

# Calculate the yearly mean ratings and counts
yearly_stats <- movie_data %>% 
  group_by(Year) %>% 
  summarise(mean_rating = mean(Rating), count = n())

# Plot the yearly mean ratings
ggplot(yearly_stats, aes(x = Year, y = mean_rating)) +
  geom_point() +
  labs(title = "Yearly Mean Ratings of Turkish Movies",
       x = "Year",
       y = "Mean Rating")

# Plot the yearly counts
ggplot(yearly_stats, aes(x = Year, y = count)) +
  geom_point() +
  labs(title = "Yearly Counts of Turkish Movies",
       x = "Year",
       y = "Count")
# It can be seen how the average scores and number of films of Turkish films change over the years. Some observations are as follows: -The average scores of Turkish films decreased after 2010 and reached the lowest level in 2023. -The number of Turkish films started to increase after 2010 and reached the highest level in 2023-There seems to be a negative relationship between the average scores of Turkish films and their numbers. That is, as the number of movies increases, the average score decreases.

# Plot the box plot of ratings by year
ggplot(movie_data, aes(x = Year, y = Rating)) +
  geom_boxplot() +
  labs(title = "Box Plot of Ratings of Turkish Movies by Year",
       x = "Year",
       y = "Rating")

#It can be seen how the scores of Turkish films change over the years, in which years they received higher or lower scores, and in which years there is more or less variation. Some observations are as follows: -The median of the scores of Turkish films decreased after 2010 and reached the lowest level in 2023. -The quarters of the scores of Turkish films narrowed after 2010 and reached the narrowest level in 2023. This shows that the scores of the films are more homogeneous. -The outliers in the scores of Turkish films decreased after 2010 and decreased to almost none in 2023. This indicates that the scores for the films are more normally distributed.

#d)

cor(movie_data$Votes, movie_data$Rating) 

# Returns the correlation coefficient between the number of votes and the score. Since it is a value close to 0, we can say that there is no relationship, that is, there is no connection between the number of votes and the score. Since the value is close to zero, we can say that there is a weak positive relationship between the number of votes and the score. So, we can say that as the number of votes increases, the score also increases slightly. However, this relationship is not very strong.


#e

cor(movie_data$Duration, movie_data$Rating) 

#Since the value is close to zero, we can say that there is a weak positive relationship between the number of votes and the score. So, we can say that as the number of votes increases, the score also increases slightly. However, this relationship is not very strong.

# Define the URL
url_top_1000 <- "https://m.imdb.com/search/title/?title_type=feature&sort=moviemeter,asc&groups=top_1000&country_of_origin=TR"

# Read the HTML data
data_html <- read_html(url_top_1000)

# Extract the title names
title_names <- data_html |> html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names,-1),-1)
title_names <- str_split(title_names, " ", n=2)
title_names <- unlist(lapply(title_names, function(x) {x[2]}))

# Extract the year values
year_values <- data_html |> html_nodes('.dli-title-metadata-item:nth-child(1)')
year_values <- html_text(year_values)
year_values <- str_remove_all(year_values, "[()]")
year_values <- as.numeric(year_values)

# Create the data frame
top_1000_data <- data.frame(Title = title_names, Year = year_values)

# Join the two data frames by title
top_1000_data <- inner_join(movie_data, top_1000_data, by = "Title")

# Arrange the data frame by rating in descending order
movie_data %>% arrange(desc(Rating)) %>% head(11)

print(top_1000_data)

#The first 11 movies in the top_1000_data data frame are not the same as the first 11 movies in the movie_data data frame. This means that IMDb determines the top 1000 movie list not only based on ratings but also other factors such as number of movie views, country, genre, etc.



```
